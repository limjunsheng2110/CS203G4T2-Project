name: Full CI/CD Pipeline: Build, Test, Inject Secrets, & Publish Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    # Grant necessary permissions for reading code and pushing packages/images
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # -----------------------------------------------------------------------
      # 1. CONTINUOUS INTEGRATION (CI) PHASE: Build and Test Java Application
      # -----------------------------------------------------------------------

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and Test application
        run: mvn clean package

      # -----------------------------------------------------------------------
      # 2. CONTINUOUS DELIVERY (CD) PHASE: Dockerize and Publish
      # -----------------------------------------------------------------------

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # Use your Docker registry password secret

      - name: Extract metadata (tags, labels) for Docker Image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/tariff-app # <--- RENAME YOUR APP HERE
          tags: |
            type=sha,prefix=,format={{sha}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image (with Secrets)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

          # ðŸš¨ INJECT APPLICATION SECRETS AS BUILD ARGUMENTS ðŸš¨
          # These are mapped from GitHub Secrets to ARGs in your Dockerfile
          build-args: |
            SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            OPENAI_API_KEY=${{ secrets.OPENAI_KEY }}

      # -----------------------------------------------------------------------
      # 3. CLEANUP (Optional)
      # -----------------------------------------------------------------------

      - name: Upload JAR as an Artifact (For backup/review)
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: target/tariffg4t2-0.0.1-SNAPSHOT.jar # <--- Confirmed JAR Name